/**
 */
package BedriftshelsetjenesteGodkjenningsregister.provider;

import BedriftshelsetjenesteGodkjenningsregister.util.BedriftshelsetjenestenAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BedriftshelsetjenestenItemProviderAdapterFactory extends BedriftshelsetjenestenAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BedriftshelsetjenestenItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.Bedriftshelsetjeneste} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BedriftshelsetjenesteItemProvider bedriftshelsetjenesteItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.Bedriftshelsetjeneste}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBedriftshelsetjenesteAdapter() {
		if (bedriftshelsetjenesteItemProvider == null) {
			bedriftshelsetjenesteItemProvider = new BedriftshelsetjenesteItemProvider(this);
		}

		return bedriftshelsetjenesteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.Kontaktinformasjon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KontaktinformasjonItemProvider kontaktinformasjonItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.Kontaktinformasjon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKontaktinformasjonAdapter() {
		if (kontaktinformasjonItemProvider == null) {
			kontaktinformasjonItemProvider = new KontaktinformasjonItemProvider(this);
		}

		return kontaktinformasjonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.Postadresse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostadresseItemProvider postadresseItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.Postadresse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPostadresseAdapter() {
		if (postadresseItemProvider == null) {
			postadresseItemProvider = new PostadresseItemProvider(this);
		}

		return postadresseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.Kommune} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KommuneItemProvider kommuneItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.Kommune}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKommuneAdapter() {
		if (kommuneItemProvider == null) {
			kommuneItemProvider = new KommuneItemProvider(this);
		}

		return kommuneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.Fylke} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FylkeItemProvider fylkeItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.Fylke}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFylkeAdapter() {
		if (fylkeItemProvider == null) {
			fylkeItemProvider = new FylkeItemProvider(this);
		}

		return fylkeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.Kontaktperson} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KontaktpersonItemProvider kontaktpersonItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.Kontaktperson}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKontaktpersonAdapter() {
		if (kontaktpersonItemProvider == null) {
			kontaktpersonItemProvider = new KontaktpersonItemProvider(this);
		}

		return kontaktpersonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.Avdeling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvdelingItemProvider avdelingItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.Avdeling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvdelingAdapter() {
		if (avdelingItemProvider == null) {
			avdelingItemProvider = new AvdelingItemProvider(this);
		}

		return avdelingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.Godkjenningsstatus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GodkjenningsstatusItemProvider godkjenningsstatusItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.Godkjenningsstatus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGodkjenningsstatusAdapter() {
		if (godkjenningsstatusItemProvider == null) {
			godkjenningsstatusItemProvider = new GodkjenningsstatusItemProvider(this);
		}

		return godkjenningsstatusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BedriftshelsetjenesteGodkjenningsregister.UoD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UoDItemProvider uoDItemProvider;

	/**
	 * This creates an adapter for a {@link BedriftshelsetjenesteGodkjenningsregister.UoD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUoDAdapter() {
		if (uoDItemProvider == null) {
			uoDItemProvider = new UoDItemProvider(this);
		}

		return uoDItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (bedriftshelsetjenesteItemProvider != null)
			bedriftshelsetjenesteItemProvider.dispose();
		if (kontaktinformasjonItemProvider != null)
			kontaktinformasjonItemProvider.dispose();
		if (postadresseItemProvider != null)
			postadresseItemProvider.dispose();
		if (kommuneItemProvider != null)
			kommuneItemProvider.dispose();
		if (fylkeItemProvider != null)
			fylkeItemProvider.dispose();
		if (kontaktpersonItemProvider != null)
			kontaktpersonItemProvider.dispose();
		if (avdelingItemProvider != null)
			avdelingItemProvider.dispose();
		if (godkjenningsstatusItemProvider != null)
			godkjenningsstatusItemProvider.dispose();
		if (uoDItemProvider != null)
			uoDItemProvider.dispose();
	}

}
